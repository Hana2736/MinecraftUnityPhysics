// <auto-generated>
//   This file was generated by a tool; you should avoid making direct changes.
//   Consider using 'partial classes' to extend these types
//   Input: my.proto
// </auto-generated>

#region Designer generated code
#pragma warning disable CS0612, CS0618, CS1591, CS3021, IDE0079, IDE1006, RCS1036, RCS1057, RCS1085, RCS1192
[global::ProtoBuf.ProtoContract()]
public partial class NextMessageType : global::ProtoBuf.IExtensible
{
    private global::ProtoBuf.IExtension __pbn__extensionData;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
        => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

    [global::ProtoBuf.ProtoMember(1)]
    public MessageType mType { get; set; }

}

[global::ProtoBuf.ProtoContract()]
public partial class AddPlayer : global::ProtoBuf.IExtensible
{
    private global::ProtoBuf.IExtension __pbn__extensionData;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
        => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

    [global::ProtoBuf.ProtoMember(1)]
    public uint playerID { get; set; }

    [global::ProtoBuf.ProtoMember(2)]
    [global::System.ComponentModel.DefaultValue("")]
    public string playerName { get; set; } = "";

}

[global::ProtoBuf.ProtoContract()]
public partial class WorldBlock : global::ProtoBuf.IExtensible
{
    private global::ProtoBuf.IExtension __pbn__extensionData;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
        => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

    [global::ProtoBuf.ProtoMember(1, DataFormat = global::ProtoBuf.DataFormat.ZigZag, IsPacked = true)]
    public int[] blockCoords { get; set; }

}

[global::ProtoBuf.ProtoContract()]
public partial class PlayerUpdate : global::ProtoBuf.IExtensible
{
    private global::ProtoBuf.IExtension __pbn__extensionData;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
        => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

    [global::ProtoBuf.ProtoMember(1)]
    public uint playerID { get; set; }

    [global::ProtoBuf.ProtoMember(2, IsPacked = true)]
    public float[] playerCoords { get; set; }

    [global::ProtoBuf.ProtoMember(3, Name = @"playerVel", IsPacked = true)]
    public float[] playerVels { get; set; }

}

[global::ProtoBuf.ProtoContract()]
public partial class AddPhys : global::ProtoBuf.IExtensible
{
    private global::ProtoBuf.IExtension __pbn__extensionData;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
        => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

    [global::ProtoBuf.ProtoMember(1)]
    public uint objectID { get; set; }

    [global::ProtoBuf.ProtoMember(2, IsPacked = true)]
    public float[] objectCoords { get; set; }

}

[global::ProtoBuf.ProtoContract()]
public partial class PhysUpdate : global::ProtoBuf.IExtensible
{
    private global::ProtoBuf.IExtension __pbn__extensionData;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
        => global::ProtoBuf.Extensible.GetExtensionObject(ref __pbn__extensionData, createIfMissing);

    [global::ProtoBuf.ProtoMember(1)]
    public uint objectID { get; set; }

    [global::ProtoBuf.ProtoMember(2, IsPacked = true)]
    public float[] objectCoords { get; set; }

    [global::ProtoBuf.ProtoMember(3, Name = @"objectTransMatrix", IsPacked = true)]
    public float[] objectTransMatrixs { get; set; }

}

[global::ProtoBuf.ProtoContract()]
public enum MessageType
{
    mAddPlayer = 0,
    mWorldBlock = 1,
    mPlayerUpdate = 2,
    mAddPhys = 3,
    mPhysUpdate = 4,
}

#pragma warning restore CS0612, CS0618, CS1591, CS3021, IDE0079, IDE1006, RCS1036, RCS1057, RCS1085, RCS1192
#endregion
